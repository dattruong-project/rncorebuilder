/// <reference types="react" />
import { Animated } from 'react-native';
import { ButtonStyle, TextStyle } from './type';
type ModalBackgroundProps = {
    isShown: boolean;
};
export declare const ModalBackground: import("styled-components/native").IStyledComponent<"native", import("styled-components/native/dist/types").Substitute<import("react-native").ViewProps, ModalBackgroundProps>>;
export declare const Container: import("styled-components/native").IStyledComponent<"native", {
    children?: string | number | boolean | Animated.Value | Animated.AnimatedInterpolation<string | number> | Animated.WithAnimatedObject<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | Animated.WithAnimatedObject<Iterable<import("react").ReactNode>> | Animated.WithAnimatedObject<import("react").ReactPortal>;
    hitSlop?: Animated.WithAnimatedObject<import("react-native").Insets>;
    id?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    onLayout?: (event: import("react-native").LayoutChangeEvent) => void;
    pointerEvents?: "none" | "box-none" | "box-only" | "auto" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    removeClippedSubviews?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    style?: false | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | Animated.Value | Animated.AnimatedInterpolation<string | number> | Animated.WithAnimatedObject<import("react-native").ViewStyle> | Animated.WithAnimatedArray<false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle> | import("react-native").RecursiveArray<false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle>> | readonly (false | import("react-native").ViewStyle | import("react-native").RegisteredStyle<import("react-native").ViewStyle>)[]>;
    testID?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    nativeID?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    collapsable?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    needsOffscreenAlphaCompositing?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    renderToHardwareTextureAndroid?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    focusable?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    shouldRasterizeIOS?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    isTVSelectable?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    hasTVPreferredFocus?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    tvParallaxProperties?: Animated.WithAnimatedObject<import("react-native").TVParallaxProperties>;
    tvParallaxShiftDistanceX?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    tvParallaxShiftDistanceY?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    tvParallaxTiltAngle?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    tvParallaxMagnification?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    onStartShouldSetResponder?: (event: import("react-native").GestureResponderEvent) => boolean;
    onMoveShouldSetResponder?: (event: import("react-native").GestureResponderEvent) => boolean;
    onResponderEnd?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderGrant?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderReject?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderMove?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderRelease?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderStart?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderTerminationRequest?: (event: import("react-native").GestureResponderEvent) => boolean;
    onResponderTerminate?: (event: import("react-native").GestureResponderEvent) => void;
    onStartShouldSetResponderCapture?: (event: import("react-native").GestureResponderEvent) => boolean;
    onMoveShouldSetResponderCapture?: (event: import("react-native").GestureResponderEvent) => boolean;
    onTouchStart?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchMove?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchEnd?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchCancel?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchEndCapture?: (event: import("react-native").GestureResponderEvent) => void;
    onPointerEnter?: (event: import("react-native").PointerEvent) => void;
    onPointerEnterCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerLeave?: (event: import("react-native").PointerEvent) => void;
    onPointerLeaveCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerMove?: (event: import("react-native").PointerEvent) => void;
    onPointerMoveCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerCancel?: (event: import("react-native").PointerEvent) => void;
    onPointerCancelCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerDown?: (event: import("react-native").PointerEvent) => void;
    onPointerDownCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerUp?: (event: import("react-native").PointerEvent) => void;
    onPointerUpCapture?: (event: import("react-native").PointerEvent) => void;
    accessible?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityActions?: readonly Animated.WithAnimatedObject<Readonly<{
        name: string;
        label?: string;
    }>>[];
    accessibilityLabel?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-label"?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityRole?: "search" | "link" | "button" | "header" | "menu" | "menuitem" | "summary" | "image" | "switch" | "text" | "none" | "togglebutton" | "keyboardkey" | "adjustable" | "imagebutton" | "alert" | "checkbox" | "combobox" | "menubar" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "tab" | "tabbar" | "tablist" | "timer" | "list" | "toolbar" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityState?: Animated.WithAnimatedObject<import("react-native").AccessibilityState>;
    "aria-busy"?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-checked"?: boolean | "mixed" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-disabled"?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-expanded"?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-selected"?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-labelledby"?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityHint?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityValue?: Animated.WithAnimatedObject<import("react-native").AccessibilityValue>;
    "aria-valuemax"?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-valuemin"?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-valuenow"?: number | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-valuetext"?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    onAccessibilityAction?: (event: import("react-native").AccessibilityActionEvent) => void;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-hidden"?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-live"?: "polite" | "assertive" | "off" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    "aria-modal"?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    role?: "link" | "article" | "button" | "dialog" | "figure" | "form" | "img" | "main" | "menu" | "menuitem" | "meter" | "option" | "summary" | "table" | "switch" | "none" | "alert" | "checkbox" | "combobox" | "menubar" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "tab" | "tablist" | "timer" | "list" | "toolbar" | "alertdialog" | "application" | "banner" | "cell" | "columnheader" | "complementary" | "contentinfo" | "definition" | "directory" | "document" | "feed" | "grid" | "group" | "heading" | "listitem" | "log" | "marquee" | "math" | "navigation" | "note" | "presentation" | "region" | "row" | "rowgroup" | "rowheader" | "searchbox" | "separator" | "slider" | "status" | "tabpanel" | "term" | "tooltip" | "tree" | "treegrid" | "treeitem" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityLabelledBy?: string | Animated.Value | Animated.AnimatedInterpolation<string | number> | Animated.WithAnimatedArray<string>;
    accessibilityElementsHidden?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityViewIsModal?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    onAccessibilityEscape?: () => void;
    onAccessibilityTap?: () => void;
    onMagicTap?: () => void;
    accessibilityIgnoresInvertColors?: boolean | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    accessibilityLanguage?: string | Animated.Value | Animated.AnimatedInterpolation<string | number>;
    ref?: import("react").Ref<import("react-native").View | Animated.LegacyRef<import("react-native").View>>;
    key?: import("react").Key;
}>;
export declare const AlertTitle: import("styled-components/native").IStyledComponent<"native", import("styled-components/native/dist/types").Substitute<import("react-native").TextProps, TextStyle>>;
export declare const AlertMessage: import("styled-components/native").IStyledComponent<"native", import("styled-components/native/dist/types").Substitute<import("react-native").TextProps, TextStyle>>;
export declare const AlertButtonsContainer: import("styled-components/native").IStyledComponent<"native", {
    children?: import("react").ReactNode;
    hitSlop?: import("react-native").Insets;
    id?: string;
    onLayout?: (event: import("react-native").LayoutChangeEvent) => void;
    pointerEvents?: "none" | "box-none" | "box-only" | "auto";
    removeClippedSubviews?: boolean;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    testID?: string;
    nativeID?: string;
    collapsable?: boolean;
    needsOffscreenAlphaCompositing?: boolean;
    renderToHardwareTextureAndroid?: boolean;
    focusable?: boolean;
    shouldRasterizeIOS?: boolean;
    isTVSelectable?: boolean;
    hasTVPreferredFocus?: boolean;
    tvParallaxProperties?: import("react-native").TVParallaxProperties;
    tvParallaxShiftDistanceX?: number;
    tvParallaxShiftDistanceY?: number;
    tvParallaxTiltAngle?: number;
    tvParallaxMagnification?: number;
    onStartShouldSetResponder?: (event: import("react-native").GestureResponderEvent) => boolean;
    onMoveShouldSetResponder?: (event: import("react-native").GestureResponderEvent) => boolean;
    onResponderEnd?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderGrant?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderReject?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderMove?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderRelease?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderStart?: (event: import("react-native").GestureResponderEvent) => void;
    onResponderTerminationRequest?: (event: import("react-native").GestureResponderEvent) => boolean;
    onResponderTerminate?: (event: import("react-native").GestureResponderEvent) => void;
    onStartShouldSetResponderCapture?: (event: import("react-native").GestureResponderEvent) => boolean;
    onMoveShouldSetResponderCapture?: (event: import("react-native").GestureResponderEvent) => boolean;
    onTouchStart?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchMove?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchEnd?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchCancel?: (event: import("react-native").GestureResponderEvent) => void;
    onTouchEndCapture?: (event: import("react-native").GestureResponderEvent) => void;
    onPointerEnter?: (event: import("react-native").PointerEvent) => void;
    onPointerEnterCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerLeave?: (event: import("react-native").PointerEvent) => void;
    onPointerLeaveCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerMove?: (event: import("react-native").PointerEvent) => void;
    onPointerMoveCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerCancel?: (event: import("react-native").PointerEvent) => void;
    onPointerCancelCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerDown?: (event: import("react-native").PointerEvent) => void;
    onPointerDownCapture?: (event: import("react-native").PointerEvent) => void;
    onPointerUp?: (event: import("react-native").PointerEvent) => void;
    onPointerUpCapture?: (event: import("react-native").PointerEvent) => void;
    accessible?: boolean;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string;
    }>[];
    accessibilityLabel?: string;
    "aria-label"?: string;
    accessibilityRole?: import("react-native").AccessibilityRole;
    accessibilityState?: import("react-native").AccessibilityState;
    "aria-busy"?: boolean;
    "aria-checked"?: boolean | "mixed";
    "aria-disabled"?: boolean;
    "aria-expanded"?: boolean;
    "aria-selected"?: boolean;
    "aria-labelledby"?: string;
    accessibilityHint?: string;
    accessibilityValue?: import("react-native").AccessibilityValue;
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    onAccessibilityAction?: (event: import("react-native").AccessibilityActionEvent) => void;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants";
    "aria-hidden"?: boolean;
    "aria-live"?: "polite" | "assertive" | "off";
    "aria-modal"?: boolean;
    role?: import("react-native").Role;
    accessibilityLiveRegion?: "none" | "polite" | "assertive";
    accessibilityLabelledBy?: string | string[];
    accessibilityElementsHidden?: boolean;
    accessibilityViewIsModal?: boolean;
    onAccessibilityEscape?: () => void;
    onAccessibilityTap?: () => void;
    onMagicTap?: () => void;
    accessibilityIgnoresInvertColors?: boolean;
    accessibilityLanguage?: string;
}>;
type AlertButtonProps = ButtonStyle & {
    width?: number;
};
export declare const AlertButton: import("styled-components/native").IStyledComponent<"native", import("styled-components/native/dist/types").Substitute<import("react-native").TouchableOpacityProps, AlertButtonProps>>;
export declare const AlertButtonText: import("styled-components/native").IStyledComponent<"native", import("styled-components/native/dist/types").Substitute<import("react-native").TextProps, ButtonStyle>>;
export {};
